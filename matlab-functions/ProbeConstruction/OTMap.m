classdef OTMap < handle
% ------------------------------------------------------------------------
% OTMap = OTMap(initialData, varargin)
% This class provides an interface to a very fast key/value interface.
%--------------------------------------------------------------------------
% Necessary Inputs
% initialData -- An 2xN array of key (1) and value (2) pairs. Both must be
% doubles. The key values do not need to be unique
%--------------------------------------------------------------------------
% Methods
%--------------------------------------------------------------------------
% Variable Inputs (Flag/ data type /(default)):
% None
%--------------------------------------------------------------------------
% Jeffrey Moffitt
% jeffmoffitt@gmail.com
% April 20, 2015
%--------------------------------------------------------------------------
% Creative Commons License CC BY NC SA
%--------------------------------------------------------------------------

% -------------------------------------------------------------------------
% Define properties
% -------------------------------------------------------------------------
properties (GetAccess=private)
    data
end

% -------------------------------------------------------------------------
% Define methods
% -------------------------------------------------------------------------
methods
    
    % -------------------------------------------------------------------------
    % Define constructor
    % -------------------------------------------------------------------------
    function obj = OTMap(initialData)
        % -------------------------------------------------------------------------
        % Check intput
        % -------------------------------------------------------------------------
        if nargin < 1
            initialData = zeros(2,0);
        end
        if ~isa(initialData, 'double') || size(initialData,1) ~= 2
            error('matlabFunctions:invalidArguments', ...
                ['initialData must be a double of size 2xN']);
        end
        
        % -------------------------------------------------------------------------
        % Find unique keys and accumulate values
        % -------------------------------------------------------------------------         
        [uniqueKeys, ~, ic] = unique(initialData(1,:));
        values = accumarray(ic, initialData(2,:), [])';
        
        % -------------------------------------------------------------------------
        % Set data
        % -------------------------------------------------------------------------         
        obj.data = [uniqueKeys; values];
    end
    
    % -------------------------------------------------------------------------
    % AddToMap
    % -------------------------------------------------------------------------
    function AddToMap(obj, newData)
        % -------------------------------------------------------------------------
        % Check data
        % -------------------------------------------------------------------------         
        if ~isa(newData, 'double') || size(newData,1) ~=2
            error('Invalid data format');
        end
        
        % -------------------------------------------------------------------------
        % Find overlapping values, sum where needed, and reassign
        % -------------------------------------------------------------------------         
        obj.data = cat(2,obj.data, newData);
        [uniqueKeys, ~, ic] = unique(obj.data(1,:));
        values = accumarray(ic, obj.data(2,:), [])';
        obj.data = [uniqueKeys; values;];
    end
    
%     % -------------------------------------------------------------------------
%     % SubtractFromMap
%     % -------------------------------------------------------------------------
%     function obj = SubtractFromMap(obj, newData)
%         % -------------------------------------------------------------------------
%         % Check data
%         % -------------------------------------------------------------------------         
%         if ~isa(newData, 'double') || size(newData,1) ~=2
%             error('Invalid data format');
%         end
%         % -------------------------------------------------------------------------
%         % Identify keys to subtract: issue warning if keys are not in both
%         % maps
%         % -------------------------------------------------------------------------         
%         [~, ia, ib] = intersect(obj.data(1,:), newData(1,:));
%         if length(ib)~=size(newData,2)
%             warning('matlabFunctions:missingKeys', ...
%                 'Some keys are present for subtraction and will be ignored!');
%         end
%         
%         % -------------------------------------------------------------------------
%         % Subtract values and reassign to the keys
%         % -------------------------------------------------------------------------         
%         obj.data(2, ia) = obj.data(2,ia) - newData(2,ib);
%         
%         % -------------------------------------------------------------------------
%         % Remove keys for which subtraction produced a zero
%         % -------------------------------------------------------------------------         
%         isZero = obj.data(2,ia) == 0;
%         obj.data(:,ia(isZero)) = [];
%         
%     end
    
    % -------------------------------------------------------------------------
    % Return key values
    % -------------------------------------------------------------------------
    function values = GetValues(obj, keys)
        % -------------------------------------------------------------------------
        % Prepare output
        % -------------------------------------------------------------------------         
        values = zeros(1, length(keys));
        
        % -------------------------------------------------------------------------
        % Find keys
        % -------------------------------------------------------------------------         
        [~, ia, ib] = intersect(obj.data(1,:), keys);
        
        % -------------------------------------------------------------------------
        % Return values
        % -------------------------------------------------------------------------         
        values(ib) = obj.data(2,ia);
    end
    
    % -------------------------------------------------------------------------
    % Return Table
    % -------------------------------------------------------------------------
    function data = GetTable(obj)
        data = obj.data;
    end
    
    % -------------------------------------------------------------------------
    % Return keys
    % -------------------------------------------------------------------------
    function data = keys(obj)
        data = obj.data(1,:);
    end

    % -------------------------------------------------------------------------
    % Return Values
    % -------------------------------------------------------------------------
    function data = values(obj)
        data = obj.data(2,:);
    end
    
    % -------------------------------------------------------------------------
    % Return length
    % -------------------------------------------------------------------------
    function numEntries = length(obj)
        numEntries = size(obj.data,2);
    end
end
end