%% Initialize data

%simulated data - replace <dictionary> and <exps> with real values
%q=[0.160927,0.141777,0.243084,0.00698717,0.122038,0.20711,0.16178,0.0542971,0.117007,0.0203229,0.223415,0.0320208,0.056621,0.233519,0.0362676,0.159154];
%csim=[440,338,299,291,470,448,269,464,462,284,266,496,254,471];

%dictionary for the experimental counts
dictionary=[[0, 0, 0, 0, 0, 0, 0, 1]; [0, 0, 0, 0, 0, 0, 1, 0]; [0, 0, 0, 0, 0, 0, 1, 1]; [0, 0, 0, 0, 0, 1, 0, 0]; [0, 0, 0, 0, 0, 1, 0, 1]; [0, 0, 0, 0, 0, 1, 1, 0]; [0, 0, 0, 0, 0, 1, 1, 1]; [0, 0, 0, 0, 1, 0, 0, 0]; [0, 0, 0, 0, 1, 0, 0, 1]; [0, 0, 0, 0, 1, 0, 1, 0]; [0, 0, 0, 0, 1, 0, 1, 1]; [0, 0, 0, 0, 1, 1, 0, 0]; [0, 0, 0, 0, 1, 1, 0, 1]; [0, 0, 0, 0, 1, 1, 1, 0]; [0, 0, 0, 0, 1, 1, 1, 1]; [0, 0, 0, 1, 0, 0, 0, 0]; [0, 0, 0, 1, 0, 0, 0, 1]; [0, 0, 0, 1, 0, 0, 1, 0]; [0, 0, 0, 1, 0, 0, 1, 1]; [0, 0, 0, 1, 0, 1, 0, 0]; [0, 0, 0, 1, 0, 1, 0, 1]; [0, 0, 0, 1, 0, 1, 1, 0]; [0, 0, 0, 1, 0, 1, 1, 1]; [0, 0, 0, 1, 1, 0, 0, 0]; [0, 0, 0, 1, 1, 0, 0, 1]; [0, 0, 0, 1, 1, 0, 1, 0]; [0, 0, 0, 1, 1, 0, 1, 1]; [0, 0, 0, 1, 1, 1, 0, 0]; [0, 0, 0, 1, 1, 1, 0, 1]; [0, 0, 0, 1, 1, 1, 1, 0]; [0, 0, 0, 1, 1, 1, 1, 1]; [0, 0, 1, 0, 0, 0, 0, 0]; [0, 0, 1, 0, 0, 0, 0, 1]; [0, 0, 1, 0, 0, 0, 1, 0]; [0, 0, 1, 0, 0, 0, 1, 1]; [0, 0, 1, 0, 0, 1, 0, 0]; [0, 0, 1, 0, 0, 1, 0, 1]; [0, 0, 1, 0, 0, 1, 1, 0]; [0, 0, 1, 0, 0, 1, 1, 1]; [0, 0, 1, 0, 1, 0, 0, 0]; [0, 0, 1, 0, 1, 0, 0, 1]; [0, 0, 1, 0, 1, 0, 1, 0]; [0, 0, 1, 0, 1, 0, 1, 1]; [0, 0, 1, 0, 1, 1, 0, 0]; [0, 0, 1, 0, 1, 1, 0, 1]; [0, 0, 1, 0, 1, 1, 1, 0]; [0, 0, 1, 0, 1, 1, 1, 1]; [0, 0, 1, 1, 0, 0, 0, 0]; [0, 0, 1, 1, 0, 0, 0, 1]; [0, 0, 1, 1, 0, 0, 1, 0]; [0, 0, 1, 1, 0, 0, 1, 1]; [0, 0, 1, 1, 0, 1, 0, 0]; [0, 0, 1, 1, 0, 1, 0, 1]; [0, 0, 1, 1, 0, 1, 1, 0]; [0, 0, 1, 1, 0, 1, 1, 1]; [0, 0, 1, 1, 1, 0, 0, 0]; [0, 0, 1, 1, 1, 0, 0, 1]; [0, 0, 1, 1, 1, 0, 1, 0]; [0, 0, 1, 1, 1, 0, 1, 1]; [0, 0, 1, 1, 1, 1, 0, 0]; [0, 0, 1, 1, 1, 1, 0, 1]; [0, 0, 1, 1, 1, 1, 1, 0]; [0, 0, 1, 1, 1, 1, 1, 1]; [0, 1, 0, 0, 0, 0, 0, 0]; [0, 1, 0, 0, 0, 0, 0, 1]; [0, 1, 0, 0, 0, 0, 1, 0]; [0, 1, 0, 0, 0, 0, 1, 1]; [0, 1, 0, 0, 0, 1, 0, 0]; [0, 1, 0, 0, 0, 1, 0, 1]; [0, 1, 0, 0, 0, 1, 1, 0]; [0, 1, 0, 0, 0, 1, 1, 1]; [0, 1, 0, 0, 1, 0, 0, 0]; [0, 1, 0, 0, 1, 0, 0, 1]; [0, 1, 0, 0, 1, 0, 1, 0]; [0, 1, 0, 0, 1, 0, 1, 1]; [0, 1, 0, 0, 1, 1, 0, 0]; [0, 1, 0, 0, 1, 1, 0, 1]; [0, 1, 0, 0, 1, 1, 1, 0]; [0, 1, 0, 0, 1, 1, 1, 1]; [0, 1, 0, 1, 0, 0, 0, 0]; [0, 1, 0, 1, 0, 0, 0, 1]; [0, 1, 0, 1, 0, 0, 1, 0]; [0, 1, 0, 1, 0, 0, 1, 1]; [0, 1, 0, 1, 0, 1, 0, 0]; [0, 1, 0, 1, 0, 1, 0, 1]; [0, 1, 0, 1, 0, 1, 1, 0]; [0, 1, 0, 1, 0, 1, 1, 1]; [0, 1, 0, 1, 1, 0, 0, 0]; [0, 1, 0, 1, 1, 0, 0, 1]; [0, 1, 0, 1, 1, 0, 1, 0]; [0, 1, 0, 1, 1, 0, 1, 1]; [0, 1, 0, 1, 1, 1, 0, 0]; [0, 1, 0, 1, 1, 1, 0, 1]; [0, 1, 0, 1, 1, 1, 1, 0]; [0, 1, 0, 1, 1, 1, 1, 1]; [0, 1, 1, 0, 0, 0, 0, 0]; [0, 1, 1, 0, 0, 0, 0, 1]; [0, 1, 1, 0, 0, 0, 1, 0]; [0, 1, 1, 0, 0, 0, 1, 1]; [0, 1, 1, 0, 0, 1, 0, 0]; [0, 1, 1, 0, 0, 1, 0, 1]; [0, 1, 1, 0, 0, 1, 1, 0]; [0, 1, 1, 0, 0, 1, 1, 1]; [0, 1, 1, 0, 1, 0, 0, 0]; [0, 1, 1, 0, 1, 0, 0, 1]; [0, 1, 1, 0, 1, 0, 1, 0]; [0, 1, 1, 0, 1, 0, 1, 1]; [0, 1, 1, 0, 1, 1, 0, 0]; [0, 1, 1, 0, 1, 1, 0, 1]; [0, 1, 1, 0, 1, 1, 1, 0]; [0, 1, 1, 0, 1, 1, 1, 1]; [0, 1, 1, 1, 0, 0, 0, 0]; [0, 1, 1, 1, 0, 0, 0, 1]; [0, 1, 1, 1, 0, 0, 1, 0]; [0, 1, 1, 1, 0, 0, 1, 1]; [0, 1, 1, 1, 0, 1, 0, 0]; [0, 1, 1, 1, 0, 1, 0, 1]; [0, 1, 1, 1, 0, 1, 1, 0]; [0, 1, 1, 1, 0, 1, 1, 1]; [0, 1, 1, 1, 1, 0, 0, 0]; [0, 1, 1, 1, 1, 0, 0, 1]; [0, 1, 1, 1, 1, 0, 1, 0]; [0, 1, 1, 1, 1, 0, 1, 1]; [0, 1, 1, 1, 1, 1, 0, 0]; [0, 1, 1, 1, 1, 1, 0, 1]; [0, 1, 1, 1, 1, 1, 1, 0]; [0, 1, 1, 1, 1, 1, 1, 1]; [1, 0, 0, 0, 0, 0, 0, 0]; [1, 0, 0, 0, 0, 0, 0, 1]; [1, 0, 0, 0, 0, 0, 1, 0]; [1, 0, 0, 0, 0, 0, 1, 1]; [1, 0, 0, 0, 0, 1, 0, 0]; [1, 0, 0, 0, 0, 1, 0, 1]; [1, 0, 0, 0, 0, 1, 1, 0]; [1, 0, 0, 0, 0, 1, 1, 1]; [1, 0, 0, 0, 1, 0, 0, 0]; [1, 0, 0, 0, 1, 0, 0, 1]; [1, 0, 0, 0, 1, 0, 1, 0]; [1, 0, 0, 0, 1, 0, 1, 1]; [1, 0, 0, 0, 1, 1, 0, 0]; [1, 0, 0, 0, 1, 1, 0, 1]; [1, 0, 0, 0, 1, 1, 1, 0]; [1, 0, 0, 0, 1, 1, 1, 1]; [1, 0, 0, 1, 0, 0, 0, 0]; [1, 0, 0, 1, 0, 0, 0, 1]; [1, 0, 0, 1, 0, 0, 1, 0]; [1, 0, 0, 1, 0, 0, 1, 1]; [1, 0, 0, 1, 0, 1, 0, 0]; [1, 0, 0, 1, 0, 1, 0, 1]; [1, 0, 0, 1, 0, 1, 1, 0]; [1, 0, 0, 1, 0, 1, 1, 1]; [1, 0, 0, 1, 1, 0, 0, 0]; [1, 0, 0, 1, 1, 0, 0, 1]; [1, 0, 0, 1, 1, 0, 1, 0]; [1, 0, 0, 1, 1, 0, 1, 1]; [1, 0, 0, 1, 1, 1, 0, 0]; [1, 0, 0, 1, 1, 1, 0, 1]; [1, 0, 0, 1, 1, 1, 1, 0]; [1, 0, 0, 1, 1, 1, 1, 1]; [1, 0, 1, 0, 0, 0, 0, 0]; [1, 0, 1, 0, 0, 0, 0, 1]; [1, 0, 1, 0, 0, 0, 1, 0]; [1, 0, 1, 0, 0, 0, 1, 1]; [1, 0, 1, 0, 0, 1, 0, 0]; [1, 0, 1, 0, 0, 1, 0, 1]; [1, 0, 1, 0, 0, 1, 1, 0]; [1, 0, 1, 0, 0, 1, 1, 1]; [1, 0, 1, 0, 1, 0, 0, 0]; [1, 0, 1, 0, 1, 0, 0, 1]; [1, 0, 1, 0, 1, 0, 1, 0]; [1, 0, 1, 0, 1, 0, 1, 1]; [1, 0, 1, 0, 1, 1, 0, 0]; [1, 0, 1, 0, 1, 1, 0, 1]; [1, 0, 1, 0, 1, 1, 1, 0]; [1, 0, 1, 0, 1, 1, 1, 1]; [1, 0, 1, 1, 0, 0, 0, 0]; [1, 0, 1, 1, 0, 0, 0, 1]; [1, 0, 1, 1, 0, 0, 1, 0]; [1, 0, 1, 1, 0, 0, 1, 1]; [1, 0, 1, 1, 0, 1, 0, 0]; [1, 0, 1, 1, 0, 1, 0, 1]; [1, 0, 1, 1, 0, 1, 1, 0]; [1, 0, 1, 1, 0, 1, 1, 1]; [1, 0, 1, 1, 1, 0, 0, 0]; [1, 0, 1, 1, 1, 0, 0, 1]; [1, 0, 1, 1, 1, 0, 1, 0]; [1, 0, 1, 1, 1, 0, 1, 1]; [1, 0, 1, 1, 1, 1, 0, 0]; [1, 0, 1, 1, 1, 1, 0, 1]; [1, 0, 1, 1, 1, 1, 1, 0]; [1, 0, 1, 1, 1, 1, 1, 1]; [1, 1, 0, 0, 0, 0, 0, 0]; [1, 1, 0, 0, 0, 0, 0, 1]; [1, 1, 0, 0, 0, 0, 1, 0]; [1, 1, 0, 0, 0, 0, 1, 1]; [1, 1, 0, 0, 0, 1, 0, 0]; [1, 1, 0, 0, 0, 1, 0, 1]; [1, 1, 0, 0, 0, 1, 1, 0]; [1, 1, 0, 0, 0, 1, 1, 1]; [1, 1, 0, 0, 1, 0, 0, 0]; [1, 1, 0, 0, 1, 0, 0, 1]; [1, 1, 0, 0, 1, 0, 1, 0]; [1, 1, 0, 0, 1, 0, 1, 1]; [1, 1, 0, 0, 1, 1, 0, 0]; [1, 1, 0, 0, 1, 1, 0, 1]; [1, 1, 0, 0, 1, 1, 1, 0]; [1, 1, 0, 0, 1, 1, 1, 1]; [1, 1, 0, 1, 0, 0, 0, 0]; [1, 1, 0, 1, 0, 0, 0, 1]; [1, 1, 0, 1, 0, 0, 1, 0]; [1, 1, 0, 1, 0, 0, 1, 1]; [1, 1, 0, 1, 0, 1, 0, 0]; [1, 1, 0, 1, 0, 1, 0, 1]; [1, 1, 0, 1, 0, 1, 1, 0]; [1, 1, 0, 1, 0, 1, 1, 1]; [1, 1, 0, 1, 1, 0, 0, 0]; [1, 1, 0, 1, 1, 0, 0, 1]; [1, 1, 0, 1, 1, 0, 1, 0]; [1, 1, 0, 1, 1, 0, 1, 1]; [1, 1, 0, 1, 1, 1, 0, 0]; [1, 1, 0, 1, 1, 1, 0, 1]; [1, 1, 0, 1, 1, 1, 1, 0]; [1, 1, 0, 1, 1, 1, 1, 1]; [1, 1, 1, 0, 0, 0, 0, 0]; [1, 1, 1, 0, 0, 0, 0, 1]; [1, 1, 1, 0, 0, 0, 1, 0]; [1, 1, 1, 0, 0, 0, 1, 1]; [1, 1, 1, 0, 0, 1, 0, 0]; [1, 1, 1, 0, 0, 1, 0, 1]; [1, 1, 1, 0, 0, 1, 1, 0]; [1, 1, 1, 0, 0, 1, 1, 1]; [1, 1, 1, 0, 1, 0, 0, 0]; [1, 1, 1, 0, 1, 0, 0, 1]; [1, 1, 1, 0, 1, 0, 1, 0]; [1, 1, 1, 0, 1, 0, 1, 1]; [1, 1, 1, 0, 1, 1, 0, 0]; [1, 1, 1, 0, 1, 1, 0, 1]; [1, 1, 1, 0, 1, 1, 1, 0]; [1, 1, 1, 0, 1, 1, 1, 1]; [1, 1, 1, 1, 0, 0, 0, 0]; [1, 1, 1, 1, 0, 0, 0, 1]; [1, 1, 1, 1, 0, 0, 1, 0]; [1, 1, 1, 1, 0, 0, 1, 1]; [1, 1, 1, 1, 0, 1, 0, 0]; [1, 1, 1, 1, 0, 1, 0, 1]; [1, 1, 1, 1, 0, 1, 1, 0]; [1, 1, 1, 1, 0, 1, 1, 1]; [1, 1, 1, 1, 1, 0, 0, 0]; [1, 1, 1, 1, 1, 0, 0, 1]; [1, 1, 1, 1, 1, 0, 1, 0]; [1, 1, 1, 1, 1, 0, 1, 1]; [1, 1, 1, 1, 1, 1, 0, 0]; [1, 1, 1, 1, 1, 1, 0, 1]; [1, 1, 1, 1, 1, 1, 1, 0]; [1, 1, 1, 1, 1, 1, 1, 1]];
%experimental counts
exps=[0.911053,2.12784,5.92438,0.651868,2.23329,4.274,6.13095,2.02866,7.20062,15.6998,5.31307,5.58526,19.6688,48.3168,7.85838,1.88596,4.1705,9.89597,41.321,4.5045,5.90632,26.468,133.708,8.13398,36.5065,16.2801,13.4621,4.45563,10.4284,8.21527,20.6621,0.600283,1.84687,6.11506,15.6676,1.43413,3.60798,11.1623,6.5126,3.40808,6.38061,50.946,6.92558,7.77637,8.01812,164.492,11.8169,5.19355,8.37781,7.48573,14.9177,12.2039,4.30118,11.5277,43.4831,24.6554,125.72,10.2725,26.3831,8.55345,33.2064,5.17601,12.4683,3.08215,13.4164,7.94792,10.5184,8.59078,41.1605,16.3964,11.4105,6.79718,7.49951,25.6089,112.924,6.44251,10.2446,16.4322,31.6952,7.61991,20.3281,54.6348,13.6249,7.76157,6.65845,19.2885,23.9759,30.0441,10.3792,15.5461,4.25433,92.4715,7.73118,20.9857,4.88482,9.47838,43.5655,10.4516,13.488,27.4235,141.527,13.0096,29.1676,17.4871,9.28708,19.4213,38.3686,10.0312,21.545,31.429,15.1944,9.42797,8.31941,182.096,14.1068,6.05187,3.52746,49.5209,10.4201,14.2514,22.2581,28.6184,6.32641,31.1467,7.55458,13.1166,2.89824,1.0895,4.03232,7.29437,32.9415,2.67203,9.2341,4.92868,11.0962,9.34457,44.3566,8.90037,13.8165,27.9688,144.159,15.805,29.7934,8.52377,4.22351,9.43154,9.14375,25.2783,3.36035,11.3579,26.2205,6.45892,7.98873,102.586,8.45881,5.40205,3.34443,28.1889,5.70771,2.04782,5.35356,22.2124,111.788,3.83477,4.63567,8.82708,30.2078,5.84631,15.6683,14.6837,19.1627,11.0578,46.8094,34.4995,14.9391,26.8805,4.06776,8.47529,4.20372,86.5204,5.93003,18.996,9.55188,9.55034,24.6191,34.5579,7.07981,13.716,7.41085,11.593,3.0945,4.71218,8.09183,33.1784,9.92199,6.50746,10.8197,102.343,9.71836,35.2256,11.0475,16.2819,24.4939,14.627,25.8393,19.5339,11.6629,29.7571,146.721,17.1333,30.2825,12.5847,38.8049,6.78742,11.905,10.5416,21.9405,20.2082,5.60739,19.5269,6.87352,8.71768,2.22818,9.49523,11.0987,16.456,21.4765,8.86399,28.3589,35.5461,12.2876,116.096,10.799,27.4587,11.6612,32.8814,13.3519,16.545,5.59399,14.7812,47.6902,37.8333,11.7492,17.3465,13.4544,12.9312,4.51481,5.51879,10.7482,11.2655,2.78191,8.48915,3.29169,4.39797,0.996221];

codes=[[0, 0, 1, 1, 1, 0, 0, 1]; [1, 0, 1, 0, 0, 0, 1, 1]; ...
    [0, 1, 0, 0, 1, 0, 1, 1]; [1, 1, 1, 0, 1, 0, 0, 0];... 
    [0, 1, 1, 0, 0, 1, 0, 1]; [0, 0, 1, 0, 1, 1, 1, 0];...
    [1, 0, 0, 1, 1, 0, 1, 0]; [0, 0, 0, 1, 0, 1, 1, 1];...
    [0, 1, 1, 1, 0, 0, 1, 0]; [1, 0, 1, 1, 0, 1, 0, 0];...
    [0, 1, 0, 1, 1, 1, 0, 0]; [1, 0, 0, 0, 1, 1, 0, 1];...
    [1, 1, 0, 0, 0, 1, 1, 0]; [1, 1, 0, 1, 0, 0, 0, 1]];

n=size(codes,2);
words=fliplr(de2bi(0:2^n-1,n)); % this is the libary with all the words
%consider reducing words to distance of 3 flips from codes
f=3;
distance=@(x,y)sum(abs(x-y));
repwords=repmat(int8(words),[size(codes,1),1]);
repcodes=repmat(int8(codes),[1,size(words,1)]);
repcodes=reshape(repcodes',[n,size(words,1)*size(codes,1)]);
repcodes=repcodes';

mindist=min(reshape(sum(abs(repcodes-repwords),2),[size(words,1),size(codes,1)]),[],2);

words=words(mindist<=f,:);
%prepare <exps> and indexes
exps0=zeros([1,size(words,1)]);
word_in_dictionary=arrayfun(@(code) find(code==bi2de(dictionary)),bi2de(words),'UniformOutput',false);
index_words_with_counts=~cellfun(@isempty,word_in_dictionary);
pos_in_dictionary=[word_in_dictionary{~cellfun(@isempty,word_in_dictionary)}];
exps0(index_words_with_counts)=exps(pos_in_dictionary);
exps=exps0;

indxcodes=arrayfun(@(code) find(code==bi2de(words)),bi2de(codes));

%% Create WR/W function - slow due to for loops->consider making it faster
%save from mathematica works considerably faster - a few seconds
%if you are tired of waiting go to exportTransitionMatrixToMatlab.nb

%WR
string='[';
for i=1:size(words,1)
    for j=1:size(codes,1)
        b=words(i,:);
        a=codes(j,:);
        for k=1:n
            if(a(k)&&b(k))
                string=[string,sprintf('(1-q(%i))*',a(k)*n+k)];
            elseif (~a(k)&&~b(k))
                string=[string,sprintf('(1-q(%i))*',k)];
            elseif (a(k)&&~b(k))
                string=[string,sprintf('q(%i)*',a(k)*n+k)];
            elseif (~a(k)&&b(k))    
                string=[string,sprintf('q(%i)*',k)];
            end
        end
        string=[string(1:end-1),','];
    end
    string=[string(1:end-1),';'];
    fprintf('complete:%i\n',int8(100*i/size(words,1)));
end
string=[string(1:end-1),']'];
%save the functions in working directory
fprintf('writing WR to file\n')
fid=fopen('WR.m','w');
fprintf(fid,'function M=WR(q)\nM=%s;\nend',string);
fclose(fid);
%W - this is the long one
string='[';
for i=1:size(words,1)
    for j=1:size(words,1)
        b=words(i,:);
        a=words(j,:);
        for k=1:n
            if(a(k)&&b(k))
                string=[string,sprintf('(1-q(%i))*',a(k)*n+k)];
            elseif (~a(k)&&~b(k))
                string=[string,sprintf('(1-q(%i))*',k)];
            elseif (a(k)&&~b(k))
                string=[string,sprintf('q(%i)*',a(k)*n+k)];
            elseif (~a(k)&&b(k))    
                string=[string,sprintf('q(%i)*',k)];
            end
        end
        string=[string(1:end-1),','];
    end
    string=[string(1:end-1),';'];
    fprintf('complete:%i\n',int8(100*i/size(words,1)));
end
string=[string(1:end-1),']'];
%save the functions in working directory
fprintf('writing W to file\n')
fid=fopen('W.m','w');
fprintf(fid,'function M=W(q)\nM=%s;\nend',string);
fclose(fid);
%% minimization
fun=@(q)minimumF(q,exps,indxcodes);
%fun(q) %tests minimumF
x0=rand([2*n,1])/10; % start at random small values - better than 0s asn 0s are degenerate
lb=zeros([2*n,1]); %lower bound for probabilities
ub=ones([2*n,1]); %upper bound for probabilities
[x,fval] = fmincon(fun,x0,[],[],[],[],lb,ub);%constrained variant for probabilities
%[x,fval]=fminunc(fun,x0);%unconstrained variant

%display results
fprintf('computed probabilities\n')
indexprob=[1:n,1:n];
for i=1:numel(x)
    fprintf('p_%i_%i_%i=%d\n',1-mod(i,2),mod(i,2),indexprob(i),x(i))
end
%The expected real counts for the words
W_mat=W(x);
real_counts=inv(W_mat)*exps';
for i=1:length(real_counts)
    fprintf('%s = %i\n',num2str(words(i,:)),round(real_counts(i)))
end
%<real_counts> and <x> - probabilities are what you need